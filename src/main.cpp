#include <Arduino.h>
#include <ArduinoJson.h>
#include <HTTPClient.h>
#include <M5Cardputer.h>
#include <M5GFX.h>
#include <WiFi.h>

const unsigned char myBitmap[] PROGMEM = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x3f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff,
    0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf8, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff,
    0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff,
    0xff, 0xfe, 0x00, 0x00, 0x00, 0x01, 0x80, 0x3f, 0xff, 0xff, 0xff, 0xff,
    0x80, 0x00, 0x00, 0x07, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00,
    0x00, 0x1f, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f,
    0xfc, 0x03, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xfe, 0x00,
    0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x3f, 0xff,
    0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff,
    0xf8, 0x00, 0x00, 0x1f, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xf8, 0x00,
    0x00, 0x1f, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f,
    0xff, 0xfe, 0x00, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff,
    0x80, 0x3f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x1f,
    0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x07, 0xff, 0xff,
    0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x01, 0xff, 0xff, 0xf8, 0x00,
    0x00, 0x1f, 0xff, 0xff, 0xff, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f,
    0xff, 0xff, 0xff, 0x80, 0x3f, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff,
    0xff, 0xe0, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xf0,
    0x07, 0xff, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xff,
    0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0xff, 0xf8, 0x00,
    0x00, 0x1f, 0xf8, 0xff, 0xc7, 0xfc, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f,
    0xf8, 0x7f, 0x87, 0xf8, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x1f, 0xfc, 0x3f,
    0x0f, 0xf0, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x1f, 0xfe, 0x1e, 0x1f, 0xf0,
    0x00, 0x01, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0x0c, 0x3f, 0xe0, 0x00, 0x00,
    0xf8, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x7f, 0xe0, 0x00, 0x00, 0x38, 0x00,
    0x00, 0x1f, 0xff, 0xc0, 0xff, 0xe0, 0x00, 0x00, 0x08, 0x00, 0x00, 0x1f,
    0xff, 0xc1, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xc0,
    0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x7f, 0xe0,
    0x00, 0x03, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x0c, 0x3f, 0xe0, 0x00, 0x07,
    0xc0, 0x00, 0x00, 0x1f, 0xfe, 0x1e, 0x1f, 0xf0, 0x00, 0x07, 0xe0, 0x00,
    0x00, 0x1f, 0xfc, 0x3f, 0x0f, 0xf0, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x1f,
    0xf8, 0x7f, 0x87, 0xf8, 0x00, 0x0f, 0xf8, 0x00, 0x00, 0x1f, 0xf8, 0xff,
    0xc7, 0xf8, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x1f, 0xfd, 0xff, 0xef, 0xfc,
    0x00, 0x3f, 0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x00, 0x7f,
    0xf8, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xf8, 0x00,
    0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x1f,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x07, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00,
    0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00,
    0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff,
    0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff,
    0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80,
    0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00,
    0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
    0x01, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff,
    0xff, 0xff, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff,
    0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0xff, 0x80, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x7f, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

class Option {
   public:
    int position;
    String name;
    String description;
    bool mark;
    void (*func)();

    Option(String name, int position, bool mark, void (*func)())
        : name(name), position(position), mark(mark), func(*func) {}

    void Exec() {
        if (this->func != nullptr) {
            this->func();
        }
    }

    void Show() { M5Cardputer.Display.println(this->name); }

    void Set() { this->mark = true; }

    void UnSet() { this->mark = false; }

    void Draw() {
        String strMark = ">> ";
        if (!this->mark) {
            strMark = "   ";
        }
        M5Cardputer.Display.println(strMark + this->name);
    }
};

class Menu {
   public:
    Option *options;
    int numOptions;

    Menu(Option *options, int numOptions)
        : options(options), numOptions(numOptions) {}

    Option *getOptionMarked() {
        for (int index = 0; index < numOptions; index++) {
            if (options[index].mark) {
                return &options[index];
            }
        }
        return nullptr;
    }

    void markOption(int index) {
        for (int i = 0; i < numOptions; i++) {
            options[i].UnSet();
        }
        options[index].Set();
    }

    void moveCursorDown() {
        M5Cardputer.Display.clearDisplay();
        M5Cardputer.Display.setCursor(0, 0);
        Option *optionMarked = getOptionMarked();
        int nextOption = (optionMarked->position + 1) % numOptions;
        markOption(nextOption);
    }

    void moveCursorUp() {
        M5Cardputer.Display.clearDisplay();
        M5Cardputer.Display.setCursor(0, 0);
        Option *optionMarked = getOptionMarked();
        int nextOption = (optionMarked->position - 1 + numOptions) % numOptions;
        markOption(nextOption);
    }

    void showOptions() {
        M5Cardputer.Display.setTextSize(1.8);
        for (int i = 0; i < numOptions; i++) {
            options[i].Draw();
        }
    }
};

void clearScreen() {
    M5Cardputer.Display.clearDisplay();
    M5Cardputer.Display.setCursor(0, 0);
}

Option options[] = {
    Option("Wi-fi", 0, true,
           []() {
               clearScreen();
               if (WiFi.status() == WL_CONNECTED) {
                   M5Cardputer.Display.println("Connected!");
               } else {
                   WiFi.begin("Paradise666", "p@r@1z0100f10");
                   M5Cardputer.Display.print("Connecting to Wi-fi");
                   while (WiFi.status() != WL_CONNECTED) {
                       delay(500);
                       M5Cardputer.Display.print(".");
                   }
                   M5Cardputer.Display.println("");
                   M5Cardputer.Display.println("Connected!");
               }
           }),
    Option("Elastic", 1, false,
           []() {
               clearScreen();
               HTTPClient http;
               http.begin("http://lab.paraizo.dev/elastic");
               int httpCode = http.GET();

               if (httpCode > 0) {
                   String payload = http.getString();

                   DynamicJsonDocument doc(1024);
                   deserializeJson(doc, payload);

                   int status = doc["status"];
               } else {
                   M5Cardputer.Display.println("Falha na solicitação HTTP");
               }

               http.end();
           }),
};

int indexMarked = 0;
const int statusBarHeight = 20;
bool isBooted = false;

Menu menu(options, sizeof(options) / sizeof(Option));

void bootScreen() {
    if (M5Cardputer.Keyboard.isChange() && M5Cardputer.Keyboard.isPressed()) {
        isBooted = true;
    }
    M5Cardputer.Display.drawBitmap(80, 2, myBitmap, 80, 80, GREEN);
    M5Cardputer.Display.setCursor(60, 90);
    M5Cardputer.Display.setTextSize(3);
    M5Cardputer.Display.print("Paraizo");
}

void setup() {
    auto cfg = M5.config();
    M5Cardputer.begin(cfg);
    M5Cardputer.Display.setRotation(1);

    M5Cardputer.Display.setTextColor(GREEN);

    bootScreen();
}

void loop() {
    M5Cardputer.update();

    if (M5Cardputer.Keyboard.isChange() && M5Cardputer.Keyboard.isPressed()) {
        if (M5Cardputer.Keyboard.isKeyPressed('.')) {
            menu.moveCursorDown();
            menu.showOptions();
        }

        if (M5Cardputer.Keyboard.isKeyPressed(';')) {
            menu.moveCursorUp();
            menu.showOptions();
        }

        if (M5Cardputer.Keyboard.isKeyPressed(KEY_ENTER)) {
            menu.getOptionMarked()->Exec();
        }
    }
}
